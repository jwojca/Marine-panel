#ifndef MARINE_PANEL_H
#define MARINE_PANEL_H

#define PCF_ADRESS 0x20
#define PWM_ADRESS 0x40
#define DISP_CENTER_X0 64
#define DISP_CENTER_Y0 32

#define WiFi_Logo_width 60
#define WiFi_Logo_height 36
const uint8_t WiFi_Logo_bits[] = {
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xF8,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0xFF, 0x07, 0x00, 0x00, 0x00,
  0x00, 0x00, 0xE0, 0xFF, 0x1F, 0x00, 0x00, 0x00, 0x00, 0x00, 0xF8, 0xFF,
  0x7F, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFC, 0xFF, 0xFF, 0x00, 0x00, 0x00,
  0x00, 0x00, 0xFE, 0xFF, 0xFF, 0x01, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF,
  0xFF, 0x03, 0x00, 0x00, 0x00, 0xFC, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00,
  0x00, 0xFF, 0xFF, 0xFF, 0x07, 0xC0, 0x83, 0x01, 0x80, 0xFF, 0xFF, 0xFF,
  0x01, 0x00, 0x07, 0x00, 0xC0, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x0C, 0x00,
  0xC0, 0xFF, 0xFF, 0x7C, 0x00, 0x60, 0x0C, 0x00, 0xC0, 0x31, 0x46, 0x7C,
  0xFC, 0x77, 0x08, 0x00, 0xE0, 0x23, 0xC6, 0x3C, 0xFC, 0x67, 0x18, 0x00,
  0xE0, 0x23, 0xE4, 0x3F, 0x1C, 0x00, 0x18, 0x00, 0xE0, 0x23, 0x60, 0x3C,
  0x1C, 0x70, 0x18, 0x00, 0xE0, 0x03, 0x60, 0x3C, 0x1C, 0x70, 0x18, 0x00,
  0xE0, 0x07, 0x60, 0x3C, 0xFC, 0x73, 0x18, 0x00, 0xE0, 0x87, 0x70, 0x3C,
  0xFC, 0x73, 0x18, 0x00, 0xE0, 0x87, 0x70, 0x3C, 0x1C, 0x70, 0x18, 0x00,
  0xE0, 0x87, 0x70, 0x3C, 0x1C, 0x70, 0x18, 0x00, 0xE0, 0x8F, 0x71, 0x3C,
  0x1C, 0x70, 0x18, 0x00, 0xC0, 0xFF, 0xFF, 0x3F, 0x00, 0x00, 0x08, 0x00,
  0xC0, 0xFF, 0xFF, 0x1F, 0x00, 0x00, 0x0C, 0x00, 0x80, 0xFF, 0xFF, 0x1F,
  0x00, 0x00, 0x06, 0x00, 0x80, 0xFF, 0xFF, 0x0F, 0x00, 0x00, 0x07, 0x00,
  0x00, 0xFE, 0xFF, 0xFF, 0xFF, 0xFF, 0x01, 0x00, 0x00, 0xF8, 0xFF, 0xFF,
  0xFF, 0x7F, 0x00, 0x00, 0x00, 0x00, 0xFE, 0xFF, 0xFF, 0x01, 0x00, 0x00,
  0x00, 0x00, 0xFC, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0xF8, 0xFF,
  0x7F, 0x00, 0x00, 0x00, 0x00, 0x00, 0xE0, 0xFF, 0x1F, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x80, 0xFF, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFC,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  };


#define abb_width 100
#define abb_height 45
static unsigned char abb_bits[] = {
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x0f, 0x00, 0xf8, 0xdf,
   0x0f, 0x80, 0xff, 0x7d, 0x00, 0x00, 0x00, 0x00, 0xbe, 0x0f, 0x00, 0xf8,
   0xdf, 0x1f, 0x80, 0xff, 0xfd, 0x01, 0x00, 0x00, 0x00, 0xbe, 0x0f, 0x00,
   0xf8, 0xdf, 0x3f, 0x80, 0xff, 0xfd, 0x03, 0x00, 0x00, 0x00, 0xbf, 0x1f,
   0x00, 0xf8, 0xdf, 0x3f, 0x80, 0xff, 0xfd, 0x03, 0x00, 0x00, 0x00, 0xbf,
   0x1f, 0x00, 0xf8, 0xdf, 0x7f, 0x80, 0xff, 0xfd, 0x07, 0x00, 0x00, 0x00,
   0xbf, 0x1f, 0x00, 0xf8, 0xdf, 0x7f, 0x80, 0xff, 0xfd, 0x07, 0x00, 0x00,
   0x80, 0xbf, 0x1f, 0x00, 0xf8, 0xdf, 0x7f, 0x80, 0xff, 0xfd, 0x07, 0x00,
   0x00, 0x80, 0xbf, 0x3f, 0x00, 0xf8, 0xdf, 0x7f, 0x80, 0xff, 0xfd, 0x07,
   0x00, 0x00, 0x80, 0xbf, 0x3f, 0x00, 0xf8, 0xdf, 0x7f, 0x80, 0xff, 0xfd,
   0x07, 0x00, 0x00, 0xc0, 0xbf, 0x3f, 0x00, 0xf8, 0xdf, 0x7f, 0x80, 0xff,
   0xfd, 0x07, 0x00, 0x00, 0xc0, 0xbf, 0x7f, 0x00, 0xf8, 0xdf, 0x7f, 0x80,
   0xff, 0xfd, 0x07, 0x00, 0x00, 0xc0, 0xbf, 0x7f, 0x00, 0xf8, 0xdf, 0x3f,
   0x80, 0xff, 0xfd, 0x03, 0x00, 0x00, 0xe0, 0xbf, 0x7f, 0x00, 0xf8, 0xdf,
   0x3f, 0x80, 0xff, 0xfd, 0x03, 0x00, 0x00, 0xe0, 0xbf, 0xff, 0x00, 0xf8,
   0xdf, 0x1f, 0x80, 0xff, 0xfd, 0x01, 0x00, 0x00, 0xe0, 0xbf, 0xff, 0x00,
   0xf8, 0xdf, 0x1f, 0x80, 0xff, 0xfd, 0x01, 0x00, 0x00, 0xf0, 0xbf, 0xff,
   0x01, 0xf8, 0xdf, 0x7f, 0x80, 0xff, 0xfd, 0x07, 0x00, 0x00, 0xf0, 0xbf,
   0xff, 0x01, 0xf8, 0xdf, 0xff, 0x80, 0xff, 0xfd, 0x0f, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0xf8, 0xbf, 0xff, 0x01, 0xf8, 0xdf, 0xff, 0x81, 0xff, 0xfd, 0x1f, 0x00,
   0x00, 0xf8, 0xbf, 0xff, 0x03, 0xf8, 0xdf, 0xff, 0x83, 0xff, 0xfd, 0x3f,
   0x00, 0x00, 0xfc, 0xbf, 0xff, 0x03, 0xf8, 0xdf, 0xff, 0x83, 0xff, 0xfd,
   0x3f, 0x00, 0x00, 0xfc, 0xbf, 0xff, 0x07, 0xf8, 0xdf, 0xff, 0x83, 0xff,
   0xfd, 0x3f, 0x00, 0x00, 0xfc, 0xbf, 0xff, 0x07, 0xf8, 0xdf, 0xff, 0x83,
   0xff, 0xfd, 0x3f, 0x00, 0x00, 0xfe, 0xbf, 0xff, 0x07, 0xf8, 0xdf, 0xff,
   0x83, 0xff, 0xfd, 0x3f, 0x00, 0x00, 0xfe, 0xbf, 0xff, 0x0f, 0xf8, 0xdf,
   0xff, 0x83, 0xff, 0xfd, 0x3f, 0x00, 0x00, 0xfe, 0xbf, 0xff, 0x0f, 0xf8,
   0xdf, 0xff, 0x83, 0xff, 0xfd, 0x3f, 0x00, 0x00, 0xff, 0xbf, 0xff, 0x0f,
   0xf8, 0xdf, 0xff, 0x83, 0xff, 0xfd, 0x3f, 0x00, 0x00, 0xff, 0x00, 0xf0,
   0x1f, 0xf8, 0xdf, 0xff, 0x83, 0xff, 0xfd, 0x3f, 0x00, 0x00, 0xff, 0x00,
   0xe0, 0x1f, 0xf8, 0xdf, 0xff, 0x81, 0xff, 0xfd, 0x1f, 0x00, 0x80, 0x7f,
   0x00, 0xe0, 0x1f, 0xf8, 0xdf, 0xff, 0x81, 0xff, 0xfd, 0x1f, 0x00, 0x80,
   0x7f, 0x00, 0xc0, 0x3f, 0xf8, 0xdf, 0xff, 0x80, 0xff, 0xfd, 0x0f, 0x00,
   0x80, 0x7f, 0x00, 0xc0, 0x3f, 0xf8, 0xdf, 0x7f, 0x80, 0xff, 0xfd, 0x07,
   0x00, 0xc0, 0x3f, 0x00, 0xc0, 0x3f, 0xf8, 0xdf, 0x3f, 0x80, 0xff, 0xfd,
   0x03, 0x00, 0xc0, 0x3f, 0x00, 0x80, 0x7f, 0xf8, 0xdf, 0x0f, 0x80, 0xff,
   0xfd, 0x00, 0x00, 0xc0, 0x3f, 0x00, 0x80, 0x7f, 0xf8, 0xdf, 0x07, 0x80,
   0xff, 0x7d, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };

#include <Wire.h>
#include <Arduino.h>
#include <PCF8574.h>
#include <stdbool.h>
#include <Adafruit_PWMServoDriver.h>
#include <SSD1306Spi.h>
#include <OLEDDisplay.h>

void RGBLedOff(uint8_t firstPin, Adafruit_PWMServoDriver pwm)
{
  pwm.setPin(firstPin, 0);
  pwm.setPin(firstPin + 1, 0);
  pwm.setPin(firstPin + 2, 0);
}

void RGBLedColor(uint8_t afirstPin, uint8_t aRed, uint8_t aGreen, uint8_t aBlue, Adafruit_PWMServoDriver pwm)
{
  uint16_t red, green, blue;
  red = map(aRed, 0, 255, 0, 4095);
  green = map(aGreen, 0, 255, 0, 4095);
  blue = map(aBlue, 0, 255, 0, 4095);

  pwm.setPin(afirstPin, red);
  pwm.setPin(afirstPin + 1, green);
  pwm.setPin(afirstPin + 2, blue);
}

void RGBLedBlink(uint16_t red, uint16_t green, uint16_t blue, uint16_t onDuration, uint16_t offDuration)
{

}

bool read2State(uint8_t pin, bool printOn, PCF8574 pcf8574)
{
  uint8_t val = pcf8574.digitalRead(pin);
  bool state;
  if(val == 0)
    state = true;
  else
    state = false;

  if (printOn)
  {
    Serial.print(state);
    Serial.print("\n"); 
  }  
 return state;
}

uint8_t read3State(uint8_t pin1, uint8_t pin2, bool printOn, PCF8574 pcf8574)
{
  uint8_t val1 = pcf8574.digitalRead(pin1);
  uint8_t val2 = pcf8574.digitalRead(pin2);
  uint8_t state;
  if(val1 == 1 && val2 == 1)
    state = 0;
  else if(val2 == 0)
    state = 1;
  else
    state = 2;

   if (printOn)
  {
    Serial.print(state);
    Serial.print("\n"); 
  }  

  return state;
}


void drawCirclePems(int16_t x0, int16_t y0, int16_t radius, SSD1306Spi &display, uint8_t progress, bool innerCircle = false) {
  int16_t x = 0, y = radius;
	int16_t dp = 1 - radius;
  uint16_t totalCirclePixels = 0;
  uint16_t pixelPerOctant = 0;
  uint16_t progressPixels = 0;
  uint16_t numOfActivePixels = 0;

  //get number of total Pemscircle pixels
  do 
  {
    if (dp < 0)
      dp = dp + (x++) * 2 + 3;
    else
      dp = dp + (x++) * 2 - (y--) * 2 + 5;
    ++pixelPerOctant;
  } while (x < y);

  totalCirclePixels = pixelPerOctant*6 + 3;
  progressPixels = map(progress, 0, 100, 0, totalCirclePixels);

  //create array for x,y data
  int16_t array[pixelPerOctant][2];
  uint16_t arrIndex = pixelPerOctant-1;

  //reset params
  x = 0;
  y = radius;
  dp = 1 - radius;

  //load x,y data into array
   do 
  {
    if (dp < 0)
      dp = dp + (x++) * 2 + 3;
    else
      dp = dp + (x++) * 2 - (y--) * 2 + 5;
    array[arrIndex][0] = x;
    array[arrIndex][1] = y;
    --arrIndex;
  } while (x < y);


  //main for cycle for 6 octants
  for(uint8_t i = 0; i < 6; ++i)
  {
    x = 0;
    y = radius;
    dp = 1 - radius;
    uint8_t indexIncrement = 0;
    uint8_t indexDecrement = pixelPerOctant-1;

    if(numOfActivePixels >= progressPixels)
        break;
    //loop for draw individual pixels, odd number load array, even number load inverted array
    do 
    {
      if(i == 0)
        display.setPixel(x0 - array[indexIncrement][1], y0 + array[indexIncrement][0]);
      if(i == 1)
        display.setPixel(x0 - array[indexDecrement][1], y0 - array[indexDecrement][0]);
      if(i == 2)
        display.setPixel(x0 - array[indexIncrement][0], y0 - array[indexIncrement][1]);
      if(i == 3)
        display.setPixel(x0 + array[indexDecrement][0], y0 - array[indexDecrement][1]);
      if(i == 4)
      display.setPixel(x0 + array[indexIncrement][1], y0 - array[indexIncrement][0]);
      if(i == 5)
        display.setPixel(x0 + array[indexDecrement][1], y0 + array[indexDecrement][0]);
      
      //to fill holes in inner circle
      if(innerCircle)
      {
        if(i == 0)
        {
          display.setPixel(x0 - array[indexIncrement][1], y0 + array[indexIncrement][0]);
          display.setPixel(x0 - array[indexIncrement][1] - 1, y0 + array[indexIncrement][0]);
          display.setPixel(x0 - array[indexIncrement][1] + 1, y0 + array[indexIncrement][0]);
        }
        
        if(i == 1)
        {
          display.setPixel(x0 - array[indexDecrement][1], y0 - array[indexDecrement][0]);
          display.setPixel(x0 - array[indexDecrement][1] + 1, y0 - array[indexDecrement][0]);
          display.setPixel(x0 - array[indexDecrement][1] - 1, y0 - array[indexDecrement][0]);
        }

        if(i == 2)
        {
          display.setPixel(x0 - array[indexIncrement][0], y0 - array[indexIncrement][1]);
          display.setPixel(x0 - array[indexIncrement][0] + 1, y0 - array[indexIncrement][1]);
          display.setPixel(x0 - array[indexIncrement][0] - 1, y0 - array[indexIncrement][1]);
        }
          
        if(i == 3)
        {
          display.setPixel(x0 + array[indexDecrement][0], y0 - array[indexDecrement][1]);
          display.setPixel(x0 + array[indexDecrement][0] + 1 , y0 - array[indexDecrement][1]);
          display.setPixel(x0 + array[indexDecrement][0] - 1, y0 - array[indexDecrement][1]);

        }
          
        if(i == 4)
        {
          display.setPixel(x0 + array[indexIncrement][1], y0 - array[indexIncrement][0]);
          display.setPixel(x0 + array[indexIncrement][1] + 1, y0 - array[indexIncrement][0]);
          display.setPixel(x0 + array[indexIncrement][1] - 1, y0 - array[indexIncrement][0]);
        }
        
        if(i == 5)
        {
          display.setPixel(x0 + array[indexDecrement][1], y0 + array[indexDecrement][0]);
          display.setPixel(x0 + array[indexDecrement][1] + 1, y0 + array[indexDecrement][0]);
          display.setPixel(x0 + array[indexDecrement][1] - 1, y0 + array[indexDecrement][0]);
        }
          
      }
      
      //draw 2 point for full circle
      if(progress >= 16)
      {
        display.setPixel(x0 - radius, y0);
        display.setPixel(x0 - radius, y0 + 1);
      }
        
      if(progress >= 49)
      {
        display.setPixel(x0, y0 - radius);
        display.setPixel(x0 - 1, y0 - radius);
      }        
      if(progress >= 80)
      {
        display.setPixel(x0 + radius, y0);
        display.setPixel(x0 + radius, y0 - 1);
      }

      ++numOfActivePixels;
      ++indexIncrement;
      --indexDecrement;
      if(numOfActivePixels >= progressPixels)
        break;

    } while (indexDecrement > 0);
  }

}

void dispPemsVisualize(SSD1306Spi &display, uint8_t progress)
{
  int bigRadius = 37;
  int smallRadius = 28;
  String progressString = String(progress);
  uint8_t progressStringOffset = 15;
  int8_t physQtyOffset = -4;
  int8_t circleOffset = 5;

  if(progress < 10)
    progressStringOffset = 14;
  else if (progress >= 10 && progress < 100)
    progressStringOffset = 18;
  else
    progressStringOffset = 22;

  display.drawString(DISP_CENTER_X0 + physQtyOffset, DISP_CENTER_Y0 - 5,  " MW");
  display.drawString(DISP_CENTER_X0 + physQtyOffset, DISP_CENTER_Y0 + 5,  " RPM");
  display.drawString(DISP_CENTER_X0 - progressStringOffset, DISP_CENTER_Y0 - 5, progressString);
  display.drawString(DISP_CENTER_X0 - progressStringOffset, DISP_CENTER_Y0 + 5, progressString);
 
  
  drawCirclePems(DISP_CENTER_X0, DISP_CENTER_Y0 + circleOffset, bigRadius, display, progress);
  drawCirclePems(DISP_CENTER_X0, DISP_CENTER_Y0 + circleOffset, bigRadius - 1, display, progress, true);
  drawCirclePems(DISP_CENTER_X0, DISP_CENTER_Y0 + circleOffset, bigRadius - 2, display, progress);
  drawCirclePems(DISP_CENTER_X0, DISP_CENTER_Y0 + circleOffset, smallRadius, display, progress);
  drawCirclePems(DISP_CENTER_X0, DISP_CENTER_Y0 + circleOffset, smallRadius + 1 , display, progress, true);
  drawCirclePems(DISP_CENTER_X0, DISP_CENTER_Y0 + circleOffset, smallRadius + 2, display, progress);
}




#endif